// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package notifyrecentlyaddedbooks

import (
	"context"
	"github.com/Joju-Matsumoto/oreilly-notification/internal/domain/model"
	"sync"
)

// Ensure, that updateRepositoryUsecaseMock does implement updateRepositoryUsecase.
// If this is not the case, regenerate this file with moq.
var _ updateRepositoryUsecase = &updateRepositoryUsecaseMock{}

// updateRepositoryUsecaseMock is a mock implementation of updateRepositoryUsecase.
//
//	func TestSomethingThatUsesupdateRepositoryUsecase(t *testing.T) {
//
//		// make and configure a mocked updateRepositoryUsecase
//		mockedupdateRepositoryUsecase := &updateRepositoryUsecaseMock{
//			UpdateRepositoryFunc: func(ctx context.Context) ([]*model.Book, error) {
//				panic("mock out the UpdateRepository method")
//			},
//		}
//
//		// use mockedupdateRepositoryUsecase in code that requires updateRepositoryUsecase
//		// and then make assertions.
//
//	}
type updateRepositoryUsecaseMock struct {
	// UpdateRepositoryFunc mocks the UpdateRepository method.
	UpdateRepositoryFunc func(ctx context.Context) ([]*model.Book, error)

	// calls tracks calls to the methods.
	calls struct {
		// UpdateRepository holds details about calls to the UpdateRepository method.
		UpdateRepository []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockUpdateRepository sync.RWMutex
}

// UpdateRepository calls UpdateRepositoryFunc.
func (mock *updateRepositoryUsecaseMock) UpdateRepository(ctx context.Context) ([]*model.Book, error) {
	if mock.UpdateRepositoryFunc == nil {
		panic("updateRepositoryUsecaseMock.UpdateRepositoryFunc: method is nil but updateRepositoryUsecase.UpdateRepository was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockUpdateRepository.Lock()
	mock.calls.UpdateRepository = append(mock.calls.UpdateRepository, callInfo)
	mock.lockUpdateRepository.Unlock()
	return mock.UpdateRepositoryFunc(ctx)
}

// UpdateRepositoryCalls gets all the calls that were made to UpdateRepository.
// Check the length with:
//
//	len(mockedupdateRepositoryUsecase.UpdateRepositoryCalls())
func (mock *updateRepositoryUsecaseMock) UpdateRepositoryCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockUpdateRepository.RLock()
	calls = mock.calls.UpdateRepository
	mock.lockUpdateRepository.RUnlock()
	return calls
}

// Ensure, that newBookNotifierMock does implement newBookNotifier.
// If this is not the case, regenerate this file with moq.
var _ newBookNotifier = &newBookNotifierMock{}

// newBookNotifierMock is a mock implementation of newBookNotifier.
//
//	func TestSomethingThatUsesnewBookNotifier(t *testing.T) {
//
//		// make and configure a mocked newBookNotifier
//		mockednewBookNotifier := &newBookNotifierMock{
//			NewBookFunc: func(ctx context.Context, books ...*model.Book) error {
//				panic("mock out the NewBook method")
//			},
//		}
//
//		// use mockednewBookNotifier in code that requires newBookNotifier
//		// and then make assertions.
//
//	}
type newBookNotifierMock struct {
	// NewBookFunc mocks the NewBook method.
	NewBookFunc func(ctx context.Context, books ...*model.Book) error

	// calls tracks calls to the methods.
	calls struct {
		// NewBook holds details about calls to the NewBook method.
		NewBook []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Books is the books argument value.
			Books []*model.Book
		}
	}
	lockNewBook sync.RWMutex
}

// NewBook calls NewBookFunc.
func (mock *newBookNotifierMock) NewBook(ctx context.Context, books ...*model.Book) error {
	if mock.NewBookFunc == nil {
		panic("newBookNotifierMock.NewBookFunc: method is nil but newBookNotifier.NewBook was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Books []*model.Book
	}{
		Ctx:   ctx,
		Books: books,
	}
	mock.lockNewBook.Lock()
	mock.calls.NewBook = append(mock.calls.NewBook, callInfo)
	mock.lockNewBook.Unlock()
	return mock.NewBookFunc(ctx, books...)
}

// NewBookCalls gets all the calls that were made to NewBook.
// Check the length with:
//
//	len(mockednewBookNotifier.NewBookCalls())
func (mock *newBookNotifierMock) NewBookCalls() []struct {
	Ctx   context.Context
	Books []*model.Book
} {
	var calls []struct {
		Ctx   context.Context
		Books []*model.Book
	}
	mock.lockNewBook.RLock()
	calls = mock.calls.NewBook
	mock.lockNewBook.RUnlock()
	return calls
}
