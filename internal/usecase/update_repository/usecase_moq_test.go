// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package updaterepository

import (
	"context"
	"github.com/Joju-Matsumoto/oreilly-notification/internal/domain/model"
	"github.com/Joju-Matsumoto/oreilly-notification/pkg/oreillyapi"
	"sync"
)

// Ensure, that bookRepositoryMock does implement bookRepository.
// If this is not the case, regenerate this file with moq.
var _ bookRepository = &bookRepositoryMock{}

// bookRepositoryMock is a mock implementation of bookRepository.
//
//	func TestSomethingThatUsesbookRepository(t *testing.T) {
//
//		// make and configure a mocked bookRepository
//		mockedbookRepository := &bookRepositoryMock{
//			GetFunc: func(ctx context.Context, id string) (*model.Book, error) {
//				panic("mock out the Get method")
//			},
//			SaveFunc: func(ctx context.Context, book *model.Book) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedbookRepository in code that requires bookRepository
//		// and then make assertions.
//
//	}
type bookRepositoryMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id string) (*model.Book, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, book *model.Book) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Book is the book argument value.
			Book *model.Book
		}
	}
	lockGet  sync.RWMutex
	lockSave sync.RWMutex
}

// Get calls GetFunc.
func (mock *bookRepositoryMock) Get(ctx context.Context, id string) (*model.Book, error) {
	if mock.GetFunc == nil {
		panic("bookRepositoryMock.GetFunc: method is nil but bookRepository.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedbookRepository.GetCalls())
func (mock *bookRepositoryMock) GetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *bookRepositoryMock) Save(ctx context.Context, book *model.Book) error {
	if mock.SaveFunc == nil {
		panic("bookRepositoryMock.SaveFunc: method is nil but bookRepository.Save was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Book *model.Book
	}{
		Ctx:  ctx,
		Book: book,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, book)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedbookRepository.SaveCalls())
func (mock *bookRepositoryMock) SaveCalls() []struct {
	Ctx  context.Context
	Book *model.Book
} {
	var calls []struct {
		Ctx  context.Context
		Book *model.Book
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// Ensure, that bookWebAPIMock does implement bookWebAPI.
// If this is not the case, regenerate this file with moq.
var _ bookWebAPI = &bookWebAPIMock{}

// bookWebAPIMock is a mock implementation of bookWebAPI.
//
//	func TestSomethingThatUsesbookWebAPI(t *testing.T) {
//
//		// make and configure a mocked bookWebAPI
//		mockedbookWebAPI := &bookWebAPIMock{
//			SearchFunc: func(ctx context.Context, opt oreillyapi.SearchOption) ([]*model.Book, error) {
//				panic("mock out the Search method")
//			},
//		}
//
//		// use mockedbookWebAPI in code that requires bookWebAPI
//		// and then make assertions.
//
//	}
type bookWebAPIMock struct {
	// SearchFunc mocks the Search method.
	SearchFunc func(ctx context.Context, opt oreillyapi.SearchOption) ([]*model.Book, error)

	// calls tracks calls to the methods.
	calls struct {
		// Search holds details about calls to the Search method.
		Search []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opt is the opt argument value.
			Opt oreillyapi.SearchOption
		}
	}
	lockSearch sync.RWMutex
}

// Search calls SearchFunc.
func (mock *bookWebAPIMock) Search(ctx context.Context, opt oreillyapi.SearchOption) ([]*model.Book, error) {
	if mock.SearchFunc == nil {
		panic("bookWebAPIMock.SearchFunc: method is nil but bookWebAPI.Search was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Opt oreillyapi.SearchOption
	}{
		Ctx: ctx,
		Opt: opt,
	}
	mock.lockSearch.Lock()
	mock.calls.Search = append(mock.calls.Search, callInfo)
	mock.lockSearch.Unlock()
	return mock.SearchFunc(ctx, opt)
}

// SearchCalls gets all the calls that were made to Search.
// Check the length with:
//
//	len(mockedbookWebAPI.SearchCalls())
func (mock *bookWebAPIMock) SearchCalls() []struct {
	Ctx context.Context
	Opt oreillyapi.SearchOption
} {
	var calls []struct {
		Ctx context.Context
		Opt oreillyapi.SearchOption
	}
	mock.lockSearch.RLock()
	calls = mock.calls.Search
	mock.lockSearch.RUnlock()
	return calls
}
